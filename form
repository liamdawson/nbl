#!/usr/bin/env bash

set -eu

###
### PACKAGES
###

apt_packages=(
  arc-theme
  autoconf
  bison
  bridge-utils
  build-essential
  cmake
  curl
  docker.io
  firefox
  fish
  fonts-noto-color-emoji
  fonts-powerline
  git
  gnome-disk-utility
  gnome-tweaks
  libbz2-dev
  libffi-dev
  libgdbm-dev
  libgdbm6
  libgit2-dev
  liblzma-dev
  libncurses5-dev
  libncursesw5-dev
  libreadline-dev
  libreadline6-dev
  libsqlite3-dev
  libssh2-1-dev
  libssl-dev
  libvirt-clients
  libvirt-daemon-system
  libyaml-dev
  llvm
  make
  opensc
  opensc-pkcs11
  pkg-config
  python-openssl
  qemu-kvm
  tilix
  tk-dev
  vim
  wget
  xz-utils
  zeal
  zlib1g-dev
)

common_brew_formulae=(
  adr-tools # ADR manipulation
  asciinema # Record shell sessions
  awscli    # Work with AWS
  bat       # Better cat
  cfssl     # TLS certificate helper
  cloudflare/cloudflare/cloudflared
  convox # Use Convox for some work projects
  direnv # Used for `.env` usage where apps won't load it themselves
  docker-machine
  docker-machine-driver-vmware
  drakew/corgi/corgi # Run script chains
  fd                 # A friendlier `find`
  fish               # My preferred shell
  fork-cleaner
  github/gh/gh
  git
  gnupg
  go
  graphviz
  helmfile
  httpie
  hub       # GitHub `git` overlay
  hyperfine # Benchmarking tool
  jq
  just             # Make alternative for scripts
  knqyf263/pet/pet # Use code/shell snippets
  kubernetes-helm
  minikube
  neofetch
  node-build
  nodenv
  nodenv/nodenv/nodenv-default-packages
  pandoc # mermaid tooling
  pastel # Work with colours
  peco
  pipx
  puma/puma/puma-dev
  pyenv
  rbenv
  ripgrep
  rs/tap/dnstrace
  rsync
  ruby-build
  shellcheck
  shfmt
  starship # cross-shell prompt
  stow
  topgrade # Update all of the packages everywhere
  tree
  vim
  watchexec # nodemon alternative
  xsv
  ykman
)

linux_brew_head_fonts=(
  linuxbrew/fonts/font-noto-mono
  linuxbrew/fonts/font-noto-sans
  linuxbrew/fonts/font-noto-serif
  linuxbrew/fonts/font-roboto-mono
)

linux_brew_formulae=(
  linuxbrew/fonts/font-cascadia-mono-pl
  linuxbrew/fonts/font-fira-mono
  linuxbrew/fonts/font-ubuntu
  linuxbrew/fonts/font-ubuntumono-nerd-font
)

# some formulae only work, or are only necessary, on a macos install
macos_brew_formulae=(
  heroku/brew/heroku
  kubernetes-cli
  libffi
  libyaml
  mas
  opensc
  openssl
  pinentry-mac
  readline
  terminal-notifier
  xz
  yubico-piv-tool
)

brew_casks=(
  1password-cli
  alfred
  aws-vault
  balenaetcher
  bdash
  beekeeper
  ccmenu
  dash
  docker
  dotnet-sdk
  firefox
  fluid
  google-chrome
  insomnia
  iterm2
  jetbrains-toolbox
  keybase
  microsoft-edge
  plex
  postbox
  powershell
  setapp
  sonos
  stoplight-studio
  stretchly
  vagrant
  vagrant-manager
  vanilla
  visual-studio-code
  vmware-fusion
  webtorrent
  \
  devhubapp/devhub/devhub
  \
  homebrew/cask-fonts/font-cascadia-mono-pl
  homebrew/cask-fonts/font-fira-mono
  homebrew/cask-fonts/font-noto-mono
  homebrew/cask-fonts/font-noto-sans
  homebrew/cask-fonts/font-noto-serif
  homebrew/cask-fonts/font-roboto-mono
  homebrew/cask-fonts/font-ubuntu
  homebrew/cask-fonts/font-ubuntumono-nerd-font
  \
  homebrew/cask-drivers/yubico-yubikey-manager
  homebrew/cask-drivers/yubico-yubikey-piv-manager
  \
  homebrew/cask-versions/firefox-developer-edition
)

# shellcheck disable=SC2016
misc_installs=(
  'command -v rustup >/dev/null || curl --proto "=https" --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --no-modify-path'
)

snap_packages=(
  '--classic kubectl'
  '--classic powershell'
)

cargo_packages=(
  cargo-edit
  cargo-update
)

###
### END PACKAGES
###

main() {
  local brew_formulae
  local head_brew_formulae
  local brew_casks

  extract_formulae brew_formulae head_brew_formulae brew_casks

  sudo -v

  # ensure assumption: .local/bin on path
  export PATH="$PATH:~/.local/bin"

  # ensure assumption: homebrew installed
  if is_linux; then
    export PATH="$PATH:/home/linuxbrew/.linuxbrew/bin"
    command_exists curl || run sudo apt-get install -y curl
    command_exists brew || run sh -c "$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh)"
  elif is_macos; then
    command_exists brew || run /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  fi

  # ensure assumption: packages up to date/available
  if is_linux && command_exists apt-get; then
    run sudo bash -c 'apt-get update && apt-get upgrade -y'
    run sudo apt-get install -y "${apt_packages[@]}"
  fi

  [ ${#brew_formulae[@]} -eq 0 ] || run brew install "${brew_formulae[@]}"
  [ ${#head_brew_formulae[@]} -eq 0 ] || run brew install --HEAD "${head_brew_formulae[@]}"
  [ ${#brew_casks[@]} -eq 0 ] || run brew cask install "${brew_casks[@]}"

  if command -v snap >/dev/null; then
    for pkg in "${snap_packages[@]}"; do
      # shellcheck disable=SC2086
      run sudo snap install $pkg
    done
  fi

  # manual installation where casks etc. weren't available

  if is_linux && ! command_exists code; then
    run curl -fsSLo /tmp/code.deb "https://go.microsoft.com/fwlink/?LinkID=760868"

    run sudo dpkg -i /tmp/code.deb
    run rm /tmp/code.deb
  fi

  for cmd in "${misc_installs[@]}"; do
    run bash -c "$cmd"
  done

  for pkg in "${cargo_packages[@]}"; do
    run cargo_install "$pkg"
  done

  run nodenv default-packages install --all
  run rbenv_default_gems

  run topgrade
}

is_linux() {
  test "$(uname)" = 'Linux'
}

is_macos() {
  test "$(uname)" = 'Darwin'
}

command_exists() {
  test -x "$(command -v "$1")"
}

extract_formulae() {
  # name references, meaning this function fills the provided arrays
  local -n formulae=$1
  local -n head_only=$2
  local -n casks=$3

  formulae=("${common_brew_formulae[@]}")
  head_only=()
  casks=()

  if is_linux; then
    formulae+=("${linux_brew_formulae[@]}")
    head_only+=("${linux_brew_head_fonts[@]}")
  elif is_macos; then
    formulae+=("${macos_brew_formulae[@]}")
    casks+=("${brew_casks[@]}")
  fi
}

cargo_install() {
  target_pkg="$1"

  if ! command_exists cargo; then
    return 0
  fi

  if ! command_exists cargo-install-update; then
    cargo install cargo-update
  fi

  if cargo install --list | grep -q "^$target_pkg"; then
    cargo install-update "$target_pkg"
  else
    cargo install "$target_pkg"
  fi
}

rbenv_default_gems() {
  (
    set +eux
    eval "$(rbenv init -)"

    default_gems="$(cat "$(rbenv root)/default-gems")"

    for version in $(rbenv versions --bare); do
      rbenv shell "$version"

      # shellcheck disable=SC2086
      gem install -N $default_gems
    done
  )
}

# to handle dry-run usage
run() {
  [ -n "${DRY_RUN:-}" ] || "$@"
}

set -x
main
