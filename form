#!/usr/bin/env bash

set -eux
sudo -v

is_linux() {
  test "$(uname)" = 'Linux'
}

is_macos() {
  test "$(uname)" = 'Darwin'
}

command_exists() {
  test -x "$(command -v "$1")"
}

cargo_install() {
  target_pkg="$1"

  if ! command_exists cargo; then
    return 0
  fi

  if ! command_exists cargo-install-update; then
    cargo install cargo-update
  fi

  if cargo install --list | grep -q "^$target_pkg"; then
    cargo install-update "$target_pkg"
  else
    cargo install "$target_pkg"
  fi
}

# ensure assumption: .local/bin on path
export PATH="$PATH:~/.local/bin"

# ensure assumption: homebrew installed
if is_linux; then
  export PATH="$PATH:/home/linuxbrew/.linuxbrew/bin"
  command_exists curl || sudo apt-get install -y curl
  command_exists brew || sh -c "$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh)"
elif is_macos; then
  command_exists brew || /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
fi

# ensure assumption: packages up to date

! command_exists apt-get || sudo bash -c 'apt-get update && apt-get upgrade -y'
! command_exists brew || bash -c 'brew update && brew upgrade'
! is_macos || brew cask upgrade

# all the packages

apt_packages=(
  arc-theme
  autoconf
  bison
  bridge-utils
  build-essential
  cmake
  curl
  docker.io
  firefox
  fish
  fonts-noto-color-emoji
  git
  gnome-disk-utility
  gnome-tweaks
  libbz2-dev
  libffi-dev
  libgdbm-dev
  libgdbm6
  libgit2-dev
  liblzma-dev
  libncurses5-dev
  libncursesw5-dev
  libreadline-dev
  libreadline6-dev
  libsqlite3-dev
  libssh2-1-dev
  libssl-dev
  libvirt-clients
  libvirt-daemon-system
  libyaml-dev
  llvm
  make
  opensc
  opensc-pkcs11
  pkg-config
  python-openssl
  qemu-kvm
  tilix
  tk-dev
  vim
  wget
  xz-utils
  zeal
  zlib1g-dev
)

brew_formulae=(
  adr-tools
  asciinema
  awscli
  bat
  cfssl
  convox
  direnv
  drakew/corgi/corgi
  fish
  git
  gnupg
  go
  graphviz
  helmfile
  httpie
  hub
  jq
  just
  knqyf263/pet/pet
  kubernetes-helm
  neofetch
  node-build
  nodenv
  pastel
  peco
  puma/puma/puma-dev
  pyenv
  rbenv
  ripgrep
  rsync
  ruby-build
  shellcheck
  shfmt
  stow
  vim
  xsv
  ykman
)

brew_casks=(
  1password-cli
  alfred
  aws-vault
  balenaetcher
  bdash
  ccmenu
  dash
  docker
  firefox
  iterm2
  jetbrains-toolbox
  karabiner-elements
  minikube
  muzzle
  plex-media-player
  stretchly
  vagrant
  vagrant-manager
  vanilla
  visual-studio-code
  webtorrent

  qlcolorcode
  qlcommonmark
  qlimagesize
  qlprettypatch
  qlstephen
  quicklook-json
  
  homebrew/cask-fonts/font-fira-mono
  homebrew/cask-fonts/font-noto-mono
  homebrew/cask-fonts/font-noto-sans
  homebrew/cask-fonts/font-noto-serif
  homebrew/cask-fonts/font-roboto-mono
  homebrew/cask-fonts/font-ubuntu
  
  homebrew/cask-drivers/yubico-yubikey-manager
  homebrew/cask-drivers/yubico-yubikey-piv-manager
)

misc_installs=(
  'command -v rustup >/dev/null || curl --proto "=https" --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --no-modify-path'
)

snap_packages=(
  '--classic kubectl'
)

cargo_packages=(
  cargo-update
  watchexec
)

if is_macos; then
  # some are for rbenv/pyenv etc., some only install on macOS
  brew_formulae+=(
    heroku/brew/heroku
    kubernetes-cli
    libffi
    libyaml
    mas
    opensc
    openssl
    readline
    terminal-notifier
    xz
    yubico-piv-tool
  )
fi

! is_linux || sudo apt-get install -y "${apt_packages[@]}"
brew install "${brew_formulae[@]}"
! is_macos || brew cask install "${brew_casks[@]}"

if command -v snap >/dev/null; then
  for pkg in "${snap_packages[@]}"; do
    sudo snap install $pkg
  done
fi

# manual installation where casks etc. weren't available

if is_linux && ! command_exists code; then
  curl -fsSLo /tmp/code.deb "https://go.microsoft.com/fwlink/?LinkID=760868"

  sudo dpkg -i /tmp/code.deb
  rm /tmp/code.deb
fi

for cmd in "${misc_installs[@]}"; do
  bash -c "$cmd"
done

for pkg in "${cargo_packages[@]}"; do
  cargo_install "$pkg"
done
